import Head from "next/head";
import Image from "next/image";
import { useEffect, useState, useRef } from "react";

import styles from "../styles/Home.module.sass";
import Card from "./card";
import Filter from "./filter";

import { cardQuery } from "./graphQueries";

const API_URL = "https://api.thegraph.com/subgraphs/name/erengonen/interview";

export default function Home() {
  const { pageLogo, pageTitle, cardContainer, filterText, filterSelect } =
    styles;
  const [cards, setCards] = useState([]);
  const [categories, setCategories] = useState([]);
  const [response, setResponse] = useState(true);
  const cardDiv = useRef();

  let first = 10;
  let skip = 0;

  let sy = 0;

  const wheelEvent = () => {
    const { top } = cardDiv.current.getBoundingClientRect();
    if (window.scrollY) {
      if (sy === window.scrollY) {
        setResponse(true);
        sy = 0;
      } else {
        sy = window.scrollY;
      }
    }
  };

  useEffect(() => {
    if (response) {
      skip += first;
      setResponse(false);
      fetch(API_URL, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: cardQuery(10, skip),
      }).then((res) =>
        res.json().then(({ data }) => {
          console.log("data", data);
          setCategories(data.categoryEntities);
          setCards(cards.concat(data.cardEntities));
        })
      );

      if (typeof window !== "undefined") {
        window.removeEventListener("wheel", wheelEvent);
        window.addEventListener("wheel", wheelEvent);
      }
    }
  }, [response]);

  return (
    <div>
      <Head>
        <title>NFT Cards</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className={pageLogo}>
          <Image src="/assets/logo.svg" width={152} height={94} alt="logo" />
          <p className={pageTitle}>NFT marketplace</p>
        </div>

        <div className={cardContainer} ref={cardDiv}>
          <Filter categories={categories} />
          {cards.map((item) => {
            return (
              <Card
                key={item.id + new Date().getTime() + Math.random()}
                info={item}
                categories={categories}
              ></Card>
            );
          })}
        </div>
      </main>
    </div>
  );
}
